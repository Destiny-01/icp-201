type ManualReply = variant { Ok : Order; Err : Message };
type Message = variant {
  PaymentFailed : text;
  InvalidPayload : text;
  NotFound : text;
  PaymentCompleted : text;
};
type Order = record {
  status : OrderStatus;
  memo : nat64;
  productId : text;
  seller : principal;
  price : nat64;
  paid_at_block : opt nat64;
};
type OrderStatus = variant { PaymentPending : text; Completed : text };
type Product = record {
  id : text;
  attachmentURL : text;
  title : text;
  soldAmount : nat64;
  description : text;
  seller : principal;
  price : nat64;
  location : text;
};
type ProductPayload = record {
  attachmentURL : text;
  title : text;
  description : text;
  price : nat64;
  location : text;
};
type _AzleResult = variant { Ok : Product; Err : Message };
type _AzleResult_1 = variant { Ok : Order; Err : Message };
type _AzleResult_2 = variant { Ok : text; Err : Message };
service : () -> {
  addProduct : (ProductPayload) -> (_AzleResult);
  completePurchase : (principal, text, nat64, nat64, nat64) -> (ManualReply);
  createOrder : (text) -> (_AzleResult_1);
  deleteProduct : (text) -> (_AzleResult_2);
  getAddressFromPrincipal : (principal) -> (text) query;
  getOrders : () -> (vec Order) query;
  getPendingOrders : () -> (vec Order) query;
  getProduct : (text) -> (_AzleResult) query;
  getProducts : () -> (vec Product) query;
  updateProduct : (Product) -> (_AzleResult);
  verifyPayment : (principal, nat64, nat64, nat64) -> (bool) query;
}